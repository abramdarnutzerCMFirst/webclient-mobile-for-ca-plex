/(!EnableAction:SetValue,SetState,SetFocus)

/(!ValuesArea)
	/(!Action:SetValue)"/(!NameID)": /(!This),/(!Action)
/(!ValuesArea)

/(!StatesArea)
	/(!Action:SetState)"/(!NameID)": {
		"disabled": /(!If:/(!Mode)=Edit)false/(!Else)true/(!If),
		"visible": /(!If:/(!Property:Visible)=No)false/(!Else)true/(!If)
	},/(!Action)
/(!StatesArea)

/(!FocusArea)
	/(!Action:SetFocus)"/(!NameID)",/(!Action)
/(!FocusArea)

new wcli.field.Checkbox({
	id: "/(!NameID)",
	name: "/(!NameID)",
	controlName: wcli.util.parseControlName("/(!Property:ControlName)"),
	cls: '/(!Param:cls)',
	label: "/(!Property:Text)" || "Field",
	labelWidth: /(!If:/(!Param:width))"/(!Param:width)" /(!Else)"40%" /(!If),
	uncheckedValue: "/(!UncheckedValue)",
	checkedValue: "/(!CheckedValue)",
	checked: /(!This) === "/(!CheckedValue)",
	value: /(!This) || "/(!UncheckedValue)",
	disabled: /(!If:/(!Mode)=Edit)false/(!Else)true/(!If),
	hidden: /(!If:/(!Property:Visible)=No)true/(!Else)false/(!If),
	listeners: {
		focus: function(e) {
				/(!If:/(!Event:phys=Gained Focus))
				panel.submit(wcli.util.evt("Gained Focus", "/(!NameID)"));
				/(!If)
		},
		blur: function(e) {
				/(!If:/(!Event:phys=Lost Focus))
				panel.submit(wcli.util.evt("Lost Focus", "/(!NameID)"));
				/(!If)
		},
		change: function(e) {
				// The initial setValue is calling the change event when it shouldn't,
				// so catch the error and ignore it
				try {
					var control = Ext.getCmp("/(!NameID)");
					var currentValue = control.getValue();
					if (currentValue === "/(!CheckedValue)"){
						control.setValue("/(!UncheckedValue)");
					}
					else{
						control.setValue("/(!CheckedValue)");
					}
					if (control.notFirstChanged){
						/(!If:/(!Event:phys=Updated))
						panel.submit(wcli.util.evt("Updated", "/(!NameID)"));
						/(!If)
						/(!If:/(!Event:phys=Modified))
						panel.submit(wcli.util.evt("Modified", "/(!NameID)"));
						/(!If)
					}
					else{
						control.notFirstChanged = true;
					}
				}
				catch (e) {
				}
		}
	}
}),